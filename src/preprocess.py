# -*- coding: utf-8 -*-
"""preprocess(1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XvUgAzbPS6oN819S2Nc0XlQ8E0037-Sn

chunk 데이터 전처리

- 'Datetime_As_Float' 생성
- 'Amount' $ 제거
- 'Is Fraud?' int로 변경
- 필요없는 열 제거
- ['Use Chip', 'Merchant Name', 'Merchant City', 'Merchant State'] 범주형 인코딩
- nan값 제거
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/KB AI/최종/dataset/creditcardsplit/chunk_10.csv')

# 날짜와 시간을 합쳐 datetime 형식으로 변환
data['Transaction_Datetime']=pd.to_datetime(data[['Year', 'Month', 'Day', 'Time']].astype(str).agg(' '.join, axis=1))

base_date = data['Transaction_Datetime'].min()
data['Days_Since_Base'] = (data['Transaction_Datetime'] - base_date).dt.days
data['Seconds_In_Day'] = data['Transaction_Datetime'].dt.hour * 3600 + data['Transaction_Datetime'].dt.minute * 60 + data['Transaction_Datetime'].dt.second
data['Fraction_Of_Day'] = data['Seconds_In_Day'] / (24 * 3600)

# 최종 실수 형태로 변환
data['Datetime_As_Float']=data['Days_Since_Base']+data['Fraction_Of_Day']

# 거래 금액 숫자 변환
data['Amount']=data['Amount'].replace('[\$,]', '', regex=True).astype(float)

# Is Fraud? 열 수치 변환
data['Is Fraud?']= data['Is Fraud?'].replace({'No':0, 'Yes':1})

# 필요 없는 열 제거
data = data.drop(columns=['Days_Since_Base', 'Seconds_In_Day', 'Fraction_Of_Day', 'Year', 'Month', 'Day', 'Time', 'Errors?', 'Transaction_Datetime'])

#범주형 데이터 인코딩
label_encoders = {}
categorical_columns = ['Use Chip', 'Merchant Name', 'Merchant City', 'Merchant State']
for col in categorical_columns:
    label_encoders[col]=LabelEncoder()
    data[col]=label_encoders[col].fit_transform(data[col].astype(str))

# nan값 제거
data = data.fillna(0)

# 전처리된 데이터 저장
data.to_csv('/content/drive/MyDrive/Colab Notebooks/KB AI/최종/case1_(Is_Fraud?분리)/dataset/preprocessed/preprocessed_transactions_10.csv', index=False)
print(data.head())

import pandas as pd

df=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/KB AI/최종/case1_(Is_Fraud?분리)/dataset/preprocessed/preprocessed_transactions_1.csv")


# 'Is Fraud?' 컬럼을 기준으로 데이터 나누기
fraud_data = df[df['Is Fraud?'] == 1]
non_fraud_data = df[df['Is Fraud?'] == 0]

# 각각의 데이터를 CSV 파일로 저장하기
fraud_data.to_csv('/content/drive/MyDrive/Colab Notebooks/KB AI/최종/case1_(Is_Fraud?분리)/dataset/Is_Fraud?==1/fraud_chunk1.csv', index=False)
non_fraud_data.to_csv('/content/drive/MyDrive/Colab Notebooks/KB AI/최종/case1_(Is_Fraud?분리)/dataset/Is_Fraud?==0/non_fraud_chunk1.csv', index=False)

columns_to_user = ['User', 'Card', 'Use Chip']
columns_to_merchant = ['Merchant Name', 'Merchant City', 'Merchant State', 'MCC']
columns_to_transaction = ['User', 'Merchant Name', 'Amount', 'Is Fraud?', 'Datetime_As_Float']

fraud_reset = fraud_data.reset_index()
non_fraud_reset = non_fraud_data.reset_index()



columns_mapping_1={
    '/content/drive/MyDrive/Colab Notebooks/KB AI/최종/case1_(Is_Fraud?분리)/dataset/original/chunk1/fraud_user.csv':columns_to_user,
    '/content/drive/MyDrive/Colab Notebooks/KB AI/최종/case1_(Is_Fraud?분리)/dataset/original/chunk1/fraud_merchant.csv':columns_to_merchant,
    '/content/drive/MyDrive/Colab Notebooks/KB AI/최종/case1_(Is_Fraud?분리)/dataset/original/chunk1/fraud_transaction.csv':columns_to_transaction
}
columns_mapping_2={
    '/content/drive/MyDrive/Colab Notebooks/KB AI/최종/case1_(Is_Fraud?분리)/dataset/original/chunk1/non_fraud_user.csv':columns_to_user,
    '/content/drive/MyDrive/Colab Notebooks/KB AI/최종/case1_(Is_Fraud?분리)/dataset/original/chunk1/non_fraud_merchant.csv':columns_to_merchant,
    '/content/drive/MyDrive/Colab Notebooks/KB AI/최종/case1_(Is_Fraud?분리)/dataset/original/chunk1/non_fraud_transaction.csv':columns_to_transaction
}

for file_name, columns in columns_mapping_1.items():
    fraud_reset_pa = fraud_reset
    fraud_reset_pa = fraud_reset_pa[['index']+columns]
    #df_subset = df_reset[columns]
    fraud_reset_pa.to_csv(file_name, index=False)
    print(f"{file_name} 파일로 저장되었습니다")

for file_name, columns in columns_mapping_2.items():
    non_fraud_reset_pa = non_fraud_reset
    non_fraud_reset_pa = non_fraud_reset_pa[['index']+columns]
    #df_subset = df_reset[columns]
    non_fraud_reset_pa.to_csv(file_name, index=False)
    print(f"{file_name} 파일로 저장되었습니다")